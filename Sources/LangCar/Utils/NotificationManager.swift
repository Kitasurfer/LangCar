#if os(iOS)
import UserNotifications

public actor NotificationManager {
    public static let shared = NotificationManager()
    private init() {}
    
    public func requestAuthorization() async {
        do {
            let granted = try await UNUserNotificationCenter.current()
                .requestAuthorization(options: [.alert, .sound, .badge])
            if !granted {
                print("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞–ø—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
            }
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: \(error)")
        }
    }
    
    /// Schedule reminder at explicit hour (0-23)
    public func scheduleDailyReminder(hour: Int, wordsDue: Int) async {
        let center = UNUserNotificationCenter.current()
        center.removeAllPendingNotificationRequests()
        guard wordsDue > 0 else { return }
        var dc = DateComponents()
        dc.hour = hour
        let trig = UNCalendarNotificationTrigger(dateMatching: dc, repeats: true)
        let c = UNMutableNotificationContent()
        c.title = "LangCar"
        c.body = "–°–µ–≥–æ–¥–Ω—è –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å \(wordsDue) —Å–ª–æ–≤. –ó–∞ —Ä—É–ª—å! üöó"
        let req = UNNotificationRequest(identifier: "dailyReview", content: c, trigger: trig)
        do {
            try await center.add(req)
        } catch {
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: \(error)")
        }
    }

    /// Smart: –µ—Å–ª–∏ autoMode = true, —á–∞—Å = —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —á–∞—Å (<12 ‚Üí 8, –∏–Ω–∞—á–µ 20)
    public func smartSchedule(autoMode: Bool, lastStudyHour: Int?, wordsDue: Int) async {
        let targetHour: Int = {
            if !autoMode { return 19 }
            guard let h = lastStudyHour else { return 19 }
            return h < 12 ? 8 : 20
        }()
        await scheduleDailyReminder(hour: targetHour, wordsDue: wordsDue)
    }
}
#endif
